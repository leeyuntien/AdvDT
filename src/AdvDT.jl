module AdvDT

using Base: Float64
using Base.Threads
const MAX_DEPTH = 10

"""
Store node information gini impurity ùê∫, target class yÃÇ, optimal field index to split Œπ, optimal threshold of field value to split Œ∏, level Œª, left child and right child.
"""
mutable struct Node # not sure when Node{T} is used 20210722, alternatively children::Array{Node, 1}
    ùê∫::Float64 # impurity of this node
    yÃÇ::Int64 # predicted class
    Œπ::Int64 # index of the field to split
    Œ∏::Float64 # threshold in the field to determine which path to take
    Œª::Int64 # level of the node
    left::Union{Nothing, Node} # left child
    right::Union{Nothing, Node} # right child
    Node(p, y, i, t, l) = new(p, y, i, t, l, nothing, nothing)
end

"""
Store split information gini impurity ùê∫‚≠ë and threshold Œ∏‚≠ë for each field for using threads.
"""
mutable struct SplitInfo
    ùê∫‚≠ë::Float64
    Œ∏‚≠ë::Float64
end

"""
Get gini impurity and target class from class labels.
"""
function gini_impurity_and_target_class(y)
    Œ∫ = length(Set(y)) # number of classes
    n = length(y) # number of records
    Œ∑s_cn = [sum(y .== i) for i in 1:Œ∫] # number of samples per class in current node
    return 1.0 - sum((Œ∑ / n) * (Œ∑ / n) for Œ∑ in Œ∑s_cn), argmax(Œ∑s_cn) # most probable class
end

"""
Iteratively find an optimal field index and field value threshold to split.
"""
function best_split(X, y, Œö)
    n, m = size(X)
    @assert n == length(y)

    Œπ‚≠ë, Œ∏‚≠ë = -1, 0.0
    if n <= 1
        return Œπ‚≠ë, Œ∏‚≠ë
    end

    Œ∑s_cn = [sum(y .== i) for i in 1:Œö] # number of samples per class in current node
    ùê∫‚≠ë = 1.0 - sum((Œ∑ / n) * (Œ∑ / n) for Œ∑ in Œ∑s_cn)

    for m·µ¢ in 1:m
        sub = hcat(X[:, m·µ¢], y)
        sorted_sub = sub[sortperm(sub[:, 1]), :] # Œ∏s = sorted_sub[:, 1], Œ∫s = sorted_sub[:, 2]
        Œ∑‚Çó = zeros(Œö) # can come with a subscript but not a big special character
        Œ∑·µ£ = copy(Œ∑s_cn) # can come with a subscript but not a big special character
        for n·µ¢ in 2:n # default sort order is from small to large
            Œ∫·µ¢ = sorted_sub[n·µ¢ - 1, 2] # corresponding class
            Œ∑‚Çó[Œ∫·µ¢] += 1 # more points towards left
            Œ∑·µ£[Œ∫·µ¢] -= 1 # fewer points towards right
            if sorted_sub[n·µ¢, 1] == sorted_sub[n·µ¢ - 1, 1] # if the same feature value then no difference
                continue
            end
            ùê∫‚Çó = 1.0 - sum((Œ∑‚Çó[Œ∫] / n·µ¢) * (Œ∑‚Çó[Œ∫] / n·µ¢) for Œ∫ in 1:Œö)
            ùê∫·µ£ = 1.0 - sum((Œ∑·µ£[Œ∫] / (n - n·µ¢)) * (Œ∑·µ£[Œ∫] / (n - n·µ¢)) for Œ∫ in 1:Œö)
            ùê∫ = (n·µ¢ * ùê∫‚Çó + (n - n·µ¢) * ùê∫·µ£) / n
            if ùê∫ < ùê∫‚≠ë
                ùê∫‚≠ë = ùê∫
                Œπ‚≠ë = m·µ¢
                Œ∏‚≠ë = (sorted_sub[n·µ¢, 1] + sorted_sub[n·µ¢ - 1, 1]) / 2
            end
        end
    end

    return Œπ‚≠ë, Œ∏‚≠ë
end

"""
Iteratively find an optimal field index and field value threshold to split using threads.
"""
function best_split_thread(X, y, Œö)
    n, m = size(X)
    @assert n == length(y)

    if n <= 1
        return -1, 0.0
    end

    Œ∑s_cn = [sum(y .== i) for i in 1:Œö] # number of samples per class in current node
    si = Array{SplitInfo, 1}(undef, m)
    for i in 1:m
        si[i].ùê∫‚≠ë = 1.0 - sum((Œ∑ / n) * (Œ∑ / n) for Œ∑ in Œ∑s_cn)
        si[i].Œ∏‚≠ë = 0.0;
    end

    @threads for m·µ¢ in 1:m
        sub = hcat(X[:, m·µ¢], y)
        sorted_sub = sub[sortperm(sub[:, 1]), :] # Œ∏s = sorted_sub[:, 1], Œ∫s = sorted_sub[:, 2]
        Œ∑‚Çó = zeros(Œö) # can come with a subscript but not a big special character
        Œ∑·µ£ = copy(Œ∑s_cn) # can come with a subscript but not a big special character
        @inbounds for n·µ¢ in 2:n # default sort order is from small to large
            if sorted_sub[n·µ¢, 1] == sorted_sub[n·µ¢ - 1, 1] # if the same feature value then no difference
                continue
            end
            Œ∫·µ¢ = sorted_sub[n·µ¢ - 1, 2] # corresponding class
            Œ∑‚Çó[Œ∫·µ¢] += 1 # more points towards left
            Œ∑·µ£[Œ∫·µ¢] -= 1 # fewer points towards right
            ùê∫‚Çó = 1.0 - sum((Œ∑‚Çó[Œ∫] / n·µ¢) * (Œ∑‚Çó[Œ∫] / n·µ¢) for Œ∫ in 1:Œö)
            ùê∫·µ£ = 1.0 - sum((Œ∑·µ£[Œ∫] / (n - n·µ¢)) * (Œ∑·µ£[Œ∫] / (n - n·µ¢)) for Œ∫ in 1:Œö)
            ùê∫ = (n·µ¢ * ùê∫‚Çó + (n - n·µ¢) * ùê∫·µ£) / n
            if ùê∫ < si[m·µ¢].ùê∫‚≠ë
                si[m·µ¢].ùê∫‚≠ë = ùê∫
                si[m·µ¢].Œ∏‚≠ë = (sorted_sub[n·µ¢, 1] + sorted_sub[n·µ¢ - 1, 1]) / 2
            end
        end
    end

    si‚≠ë = si[1]
    Œπ‚≠ë = 1
    for m·µ¢ in 2:m
        if si‚≠ë[m·µ¢].ùê∫‚≠ë < si‚≠ë.ùê∫‚≠ë
            si‚≠ë.ùê∫‚≠ë = si‚≠ë[m·µ¢].ùê∫‚≠ë
            Œπ‚≠ë = m·µ¢
            si‚≠ë.Œ∏‚≠ë = si‚≠ë[m·µ¢].Œ∏‚≠ë
        end
    end

    return Œπ‚≠ë, si‚≠ë.Œ∏‚≠ë
end

"""
Iteratively find an optimal field index and field value threshold to split using gpus.
"""
function best_split_gpu(X, y, Œö)
end

"""
Build a decision tree classifier
"""
function fit(X, y, method = "recursive")
    Œö = length(Set(y)) # total number of classes, assuming all integers

    if method == "recursive"
        tree = grow_tree_recursive(X, y, Œö)
    elseif method == "iterative"
        tree = grow_tree_iterative(X, y)
    elseif method == "threaded"
        tree = grow_tree_iterative_thread(X, y)
    else
        println(method * " not supported")
    end

    #=for r in 1:size(X)[1]
        println(predict(tree, X[r, :]))
    end=#
    return tree
end

"""
Predict target class from the tree model for the record.
"""
function predict(tree, record)
    node = tree
    while !isnothing(node.left)
        if record[node.Œπ] < node.Œ∏
            node = node.left # node.left may be #undef
        else
            node = node.right # node.right may be #undef
        end
    end
    return node.yÃÇ
end

"""
Print tree formatted.
"""
function print_tree(tree)
    node = tree
    println(node.yÃÇ, ' ', node.Œπ, ' ', node.Œ∏, ' ', node.Œª)
    if !isnothing(node.left)
        print_tree(node.left)
    end
    if !isnothing(node.right)
        print_tree(node.right)
    end
end

"""
Build a decision tree by recursively finding the best split.
"""
function grow_tree_recursive(X, y, Œö, depth = 0)
    ùëî, yÃÇ = gini_impurity_and_target_class(y)
    ŒΩ = Node(ùëî, yÃÇ, -1, 0.0, depth) # information in current node
    
    if depth < MAX_DEPTH
        Œπ‚≠ë, Œ∏‚≠ë = best_split(X, y, Œö)
        if Œπ‚≠ë > -1
            Œπs‚Çó = X[:, Œπ‚≠ë] .< Œ∏‚≠ë # indices corresponding to left
            Œπs·µ£ = X[:, Œπ‚≠ë] .>= Œ∏‚≠ë # indices corresponding to right
            X‚Çó, y‚Çó = X[Œπs‚Çó, :], y[Œπs‚Çó]
            X·µ£, y·µ£ = X[Œπs·µ£, :], y[Œπs·µ£]
            ŒΩ.Œπ = Œπ‚≠ë # best field index
            ŒΩ.Œ∏ = Œ∏‚≠ë # best field value threshold
            ŒΩ.left = grow_tree_recursive(X‚Çó, y‚Çó, Œö, depth + 1)
            ŒΩ.right = grow_tree_recursive(X·µ£, y·µ£, Œö, depth + 1)
        end
    end

    return ŒΩ
end

"""
Build a decision tree by iteratively finding the best split.
Many trees and forests can be parallelized.
"""
function grow_tree_iterative(X, y)
    Œö = length(Set(y))
    ŒΩ = Node(0.0, 0, -1, 0.0, 0) # information in current node

    node_stack = []
    push!(node_stack, (ŒΩ, Bool.(ones(1:size(X)[1])))) # all records
    while length(node_stack) > 0
        (Œ≥, Œπs) = pop!(node_stack)
        Œ≥.ùê∫, Œ≥.yÃÇ = gini_impurity_and_target_class(y[Œπs])
        if Œ≥.Œª < MAX_DEPTH
            Œπ‚≠ë, Œ∏‚≠ë = best_split(X[Œπs, :], y[Œπs], Œö)
            if Œπ‚≠ë > -1
                Œ≥.Œπ = Œπ‚≠ë # best field index
                Œ≥.Œ∏ = Œ∏‚≠ë # best field value threshold
                Œ≥.left = Node(0.0, 0, -1, 0.0, Œ≥.Œª + 1) # information in left child
                Œ≥.right = Node(0.0, 0, -1, 0.0, Œ≥.Œª + 1) # information in right child
                push!(node_stack, (Œ≥.left, (Œπs) .& (X[:, Œπ‚≠ë] .< Œ∏‚≠ë)))
                push!(node_stack, (Œ≥.right, (Œπs) .& (X[:, Œπ‚≠ë] .>= Œ∏‚≠ë)))
            end
        end        
    end

    return ŒΩ
end

"""
Build a decision tree by iteratively finding the best split using threads.
"""
function grow_tree_iterative_thread(X, y)
    Œö = length(Set(y))
    ŒΩ = Node(0.0, 0, -1, 0.0, 0) # information in current node

    node_stack = []
    push!(node_stack, (ŒΩ, Bool.(ones(1:size(X)[1])))) # all records
    while length(node_stack) > 0
        (Œ≥, Œπs) = pop!(node_stack)
        Œ≥.ùê∫, Œ≥.yÃÇ = gini_impurity_and_target_class(y[Œπs])
        if Œ≥.Œª < MAX_DEPTH
            Œπ‚≠ë, Œ∏‚≠ë = best_split_thread(X[Œπs, :], y[Œπs], Œö)
            if Œπ‚≠ë > -1
                Œ≥.Œπ = Œπ‚≠ë # best field index
                Œ≥.Œ∏ = Œ∏‚≠ë # best field value threshold
                Œ≥.left = Node(0.0, 0, -1, 0.0, Œ≥.Œª + 1) # information in left child
                Œ≥.right = Node(0.0, 0, -1, 0.0, Œ≥.Œª + 1) # information in right child
                push!(node_stack, (Œ≥.left, (Œπs) .& (X[:, Œπ‚≠ë] .< Œ∏‚≠ë)))
                push!(node_stack, (Œ≥.right, (Œπs) .& (X[:, Œπ‚≠ë] .>= Œ∏‚≠ë)))
            end
        end        
    end

    return ŒΩ
end

end # module
